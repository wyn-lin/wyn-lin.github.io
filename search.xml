<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[java基础（第二篇）java内存模型与线程安全问题]]></title>
    <url>%2F2018%2F01%2F16%2Fjava-memory-model-and-thread-safe%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[java基础（第二篇）IO流]]></title>
    <url>%2F2018%2F01%2F16%2Fjava-stream%2F</url>
    <content type="text"><![CDATA[流是什么java中，从某个来源到另一个目的地之间建立一条虚拟的管道，将要传输的内容（对象或者文件等）通过这条管道以字节序列的形式传输，内容就像水流一样从来源地流向目的地。这个来源地和目的地可以是文件，也可以是网络连接，甚至可以是内存块等。 java中使用抽象类InputStream 和OutputStream构成IO类的基础。通过它们的实现类，可以实现IO操作]]></content>
  </entry>
  <entry>
    <title><![CDATA[redis(三)spring data redis实现缓存功能]]></title>
    <url>%2F2018%2F01%2F13%2Fredis-3-spring-interates-redis%2F</url>
    <content type="text"><![CDATA[为什么使用spring-data redisspring-data redis架构redis连接工厂RedisTemplate包括ValueOperation BoundleValueOps 等 key-value 序列化器整合小demo ，实现书籍缓存功能]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[redis(二)redis概述与jedis的使用]]></title>
    <url>%2F2018%2F01%2F13%2Fredis-2-use-jedis%2F</url>
    <content type="text"><![CDATA[redis是一个高性能的、支持网络、可基于内存的key-value存储机制的NoSQL数据库。基于内存的特性使得redis有非比寻常的性能优势。 关于redis的数据结构作为key-value的数据库，redis存储的数据类型不止数值类型和字符串类型，还包括以下几种数据类型： hash类型 hash类型是一种散列类型，和java中的hashMap很像，存储的值可以包括多个不重复字段，例如一个User对象的name和age都可以作为hash类型的一个字段，相对于将每个字段单独存储为String类型，hash类型更节省内存，因为redis的hash是用zipMap来存储的，并不是hashTable, zipmap 相比正常的 hash实现可以节省不少hash本身需要的一些存储开销,虽然这样使得hash的属性的添加、删除和查找的时间复杂度为O(n),但是一般用hash类型存储对象，而对象的属性一般不会太多，因此平均时间复杂度接近于O(1)，并且，当field或value的大小超过一定大小时，redis会将hash类型从zipMap转换成正常的hash实现，这个限制可以在配置文件中如下指定 12hash-max-zipmap-entries 64 #配置字段最多 64 个hash-max-zipmap-value 512 #配置 value 最大为 512 字节 list类型 list类型是一种有序的列表类型，实现是用双向链表实现的。主要的功能有push、pop、获取列表中某个范围的元素等，存储的值都是string类型，list因为是双向链表结构，可以作为栈和队列使用。 set类型 set 类型是一种集合类型，它是无序的不可重复的，set是通过hashTable实现的，因而增删查找的复杂度都是O(1),set的操作包括set类型的交并补。 sortedSet类型 sortedSet是一种有序的Set类型，通过指定一个Score属性作为排序的域，这个域的值可以修改，每次指定score值后，sortedSet会对元素进行排序，因此插入的效率低于set，包括的功能和set类型相似，sortedSet最经常的使用方式应该是作为索引来使用.我们可以把要排序的字段作为score 存储，对象的id当元素存储。 jedis 介绍jedis是一个用java写的redis数据库操作的客户端，通过jedis，可以很方便的对redis数据库进行操作，jedis的api的学习成本也很低，源码很简单，有时间的同学可以看一下源码，jedis很多对数据库的操作的方法名都是和redis-cli的API一致，关于redis-cli的API ，常用的有以下： 简单代码演示：1234567891011121314151617181920212223242526272829303132333435363738394041424344@Testpublic void useJedis()&#123; //创建jedis对象 Jedis jedis = new Jedis(&quot;127.0.0.1&quot;,6379,5000); //认证密码，如果没有密码不需要此步 jedis.auth(&quot;password&quot;); //选择数据库序号 jedis.select(1); //存值 jedis.set(&quot;testStringKey&quot;,&quot;Hello Redis!&quot;); jedis.hset(&quot;testHashKey&quot;,&quot;msg&quot;,&quot;Hello Redis too!&quot;); //取值 System.out.println(jedis.get(&quot;testStringKey&quot;)); System.out.println(jedis.hget(&quot;testHashKey&quot;,&quot;msg&quot;)); jedis.close();&#125;/** * 使用连接池 */@Testpublic void useRedisPool()&#123; JedisPoolConfig config = new JedisPoolConfig(); //设置最大十个连接，具体编程需要根据情况配置 config.setMaxTotal(10); JedisPool jedisPool = new JedisPool(config,&quot;127.0.0.1&quot;, 6379,5000,&quot;password&quot;); Jedis jedis = jedisPool.getResource(); //存值 jedis.set(&quot;testStringKey&quot;,&quot;Hello Redis!&quot;); jedis.hset(&quot;testHashKey&quot;,&quot;msg&quot;,&quot;Hello Redis too!&quot;); //取值 System.out.println(jedis.get(&quot;testStringKey&quot;)); System.out.println(jedis.hget(&quot;testHashKey&quot;,&quot;msg&quot;)); /** * 关闭资源，使用连接池的时候，jedis.close方法对资源的处理并不是释放，而是归还连接池 */ jedis.close(); jedisPool.close();&#125; 更详细的jedis的API介绍移步jedis-2.9-doc]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[redis(一)环境搭建]]></title>
    <url>%2F2018%2F01%2F12%2Fredis-1-enviroment%2F</url>
    <content type="text"><![CDATA[本文讲述如何安装redis，分Linux环境和Windows环境。Linux采用的演示系统是centos 7.4 ,windows 采用的是win10 下载 linux ： 随便找一个目录执行以下命令,版本号自主选择1wget http://download.redis.io/releases/redis-4.0.6.tar.gz windows: redis 项目暂时还没支持Windows，但是微软的Open Tech group 开发了Windows版本，但是并没有同步更新，可以在下面这个地址 https://github.com/MicrosoftArchive/redis/releases 中选择下载，一般使用redis 都是在Linux环境下。 安装 linux 123456789101. 解压tar -zxvf redis-4.0.6.tar.gz2. 移动到合适目录mv redis-4.0.6 /opt/upzip/3. 进入redis目录cd /opt/upzip/redis-4.0.64. 编译 redismake 5. 安装 redis,prefix 指定安装目录make install PREFIX=/usr/local/redis 执行 cd /usr/local/redis/bin命令进入bin目录下执行ls命令可以看到 说明安装成功了，在当前目录下执行如下命令可启动redis服务器 1redis-server /opt/upzip/redis-4.0.6/redis.conf 但是如果想要启动后可以后台运行。需执行以下操作。 1.将之前解压之后的redis目录下的redis.conf 拷贝到安装目录bin之下1cp /opt/upzip/redis-4.0.6/redis.conf /usr/local/redis/bin/ 2.打开/usr/local/redis/bin/redis.conf1vi /usr/local/redis/bin/redis.conf 3.修改redis.conf 中的daemonize为yes4.重新启动redis-server1redis-server redis.conf 5.开启6379端口（在服务器中如果有开启防火墙才需此步） 这里centos7 防火墙使用的是自带的firewalld。 第一步：添加端口1firewall-cmd --zone=public --add-port=6379/tcp --permanent 这里zone是作用域； 6379 是端口号，tcp 代表允许建立tcp 连接，对应的还有udp ；permanent 是指永久有效，在服务器重启之后配置也同样生效；需要重启firewalld 才会使端口生效 第二步:重启firewalld1systemctl restart firewalld 第三步:查看端口是否添加生效：1firewall-cmd --list-ports 6.修改密码（为了安全起见需要修改一下密码)1vi /usr/local/redis/bin/redis.conf 找到如下requirepass 右边就是密码了，这里打码了。 windows windows 安装没什么好讲的，选择绿色版解压即可，解压之后目录下包括这些文件,配置和命令和Linux一样 启动redis 另外，可以添加到环境变量中，这样就可以不用每次使用redis-server 和redis-cli 都切换到该目录下 关闭redis-server 的方法1redis-cli shutdown redis-cliredis-cli 常用命令如下 redis 图形客户端网上有很多，因人使用习惯而异，推荐 RedisDesktopManager [传送门]]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java基础（第一篇）继承和组合]]></title>
    <url>%2F2018%2F01%2F01%2Fjava-inheritance-and-compositon%2F</url>
    <content type="text"><![CDATA[前言本文讲述上篇文章《java基础（第零篇）对象与类》遗留的问题继承与组合的区别，在讲述区别之前。先讲述继承的有关概念，如果你对继承很清楚的可以直接拉到下面阅读继承与组合的区别。 继承是什么？ 继承是面向对象三大特性之一。子类继承父类的特征和行为，使得子类对象拥有父类的属性和方法。子类亦可扩展其自己的方法。 继承的特点 子类通过关键字extends 实现对父类的继承 子类只可继承来自父类的除私有的属性和方法，对于包访问权限的属性和方法只能被同个包内的子类继承。 构造方法不能被继承。 静态方法和静态变量可以被继承。 java中，类之间只可单继承，即一个类只能继承一个父类。 接口亦可继承另一个接口，但是接口可以多继承。 继承的变量和方法可以覆盖。 方法重写不允许降低访问权限。 继承是紧耦合的。 protected 关键字作用为了封装性，尽量隐藏对象的属性，会使用private关键字修饰，但是这样一来，如果这些属性除了对外隐藏外，还允许子类继承访问，那么protected关键字就派上用场了。 重写和重载继承可以对父类的方法进行重写覆盖，而重载的概念并不是继承的一部分，重载是指类本身的方法通过参数表的不同进行重载，是编译时多态的实现方法。 举个栗子：12345678910111213public class A extends B&#123; public void method()&#123; &#125; public void method(int a)&#123; &#125;&#125;public class B&#123; public void method()&#123; &#125;&#125; 上面的A类继承了B类，其中void method方法是父类B所拥有的，但是子类对其进行了重写覆盖，这就是重写。而A类中的 void method(int a); 则是A类的method方法进行重载。通过方法参数表进行区分重载。 另外，静态方法不能重写，因为重写指的是根据运行时对象的类型来决定调用哪个方法，而不是编译时的，类静态方法是编译时确定的，即使你在子类中定义了一个和父类一样的静态方法，编译器也不会报错，从多态的角度看，这并不是对静态方法的重写，而是子类自己的方法。 看个代码就知道了： 1234567891011121314151617181920212223public class Base&#123; public static void staticMethod()&#123; System.out.println("父类静态方法执行了.."); &#125;&#125;public class Son extends Base&#123; public static void staticMethod()&#123; System.out.println("子类静态方法执行了.."); &#125;&#125;/*测试类*/public class Test&#123; public static void main(String[] args)&#123; Base b = new Son(); b.staticMethod();//1. b = new Base(); b.staticMethod();//2. Son son = new Son(); son.staticMethod();//3. &#125;&#125; 运行结果： 按照实例方法的重写的规律，如果该方法是重写，那么代码第一处的执行应该是执行子类的重写方法，但是事实却未如此。由此看来，子类中看似重写的静态方法实际上不算一种重写。 final 关键字 当一个类使用了final关键字进行修饰时，这个类不允许被继承 当一个类的实例方法使用了final关键字进行修饰时，这个方法不允许子类重写。 当一个类的属性使用了final关键字进行修饰时，这个属性不允许二次赋值，并且最晚需在构造方法中赋值，否则编译器会报错。 继承与组合的区别（重点）继承：优点： (1) 子类自动继承父类接口，在多态时很方便(2) 创建子类时无需创建父类对象 缺点： (1) 继承破坏封装性 给父类增加了一个方法A，这时子类与父类之间就可能越来越脱离is-a举个例子：比如，鸟类有羽毛等属性，这里有一个需求是，定义一个有羽毛的鸡类，采用继承的方法很优雅也很方便，直接一个extends 就可以实现，但是如果有一天，这个鸟类添加了一个飞翔的公有方法，此前继承了鸟类的鸡类会自动继承了这个方法，鸡会飞翔？顶多就是矮距离飞跃。此时给鸡飞的方法就是破坏了鸡的封装性，鸡不应该有此方法。此时的鸡已经和有飞翔行为的鸟类之间不是is-a 关系了。 (2) 继承是紧耦合: 继承紧耦合体现在父类变就会影响子类，此时子类如果因此需要修改，重构的难度可能会很高。 (3) 子类对父类的扩展往往会增加系统结构复杂度 继承树深度加深，结构越复杂。 (4) 不支持在运行时指定父类 (5) 子类不能改变父类的接口 组合什么是组合？给个代码 1234567891011121314public class A&#123; public void a1()&#123;&#125; public void a2()&#123;&#125;&#125;public class B&#123; private A a = new A(); public void a1()&#123; a.a1(); &#125; public void a2()&#123; a.a2(); &#125;&#125; 其中B类对A类这种复用的形式就是组合，这个是通过包装和方法转发实现的。 接下来讲述组合优缺点 优点 组合不破坏封装，相对于继承 组合松耦合，包装类和被包装类彼此独立，不会因为被包装类突然加个方法就使得包装类多了一个方法，包装类视情况包装所需方法。 支持动态组合，组合的方式在运行时可以根据条件来选择所组合的类。 包装类可以通过包装改变被包装类的接口，比如被包装类是实现了Set接口的，我可以通过包装，让包装类实现Map接口。 缺点 不能实现多态 无法自动获得被包装类的接口，比如被包装类实现了Set接口，包装类并没有自动获得此接口，需要经过包装，才有可能和他一样的接口。 何时用继承，何时用组合这应该才是我们关心的问题吧。在以下几种情况使用组合： 子类只需要继承父类的一部分，继承就没辙了。 如果只是为了具有父类的一些属性方法，比如汽车具有轮胎和发动引擎，但是如果为此继承这两个类是很不明智的，使用组合更为恰当。 如果设计的子类是为了复用代码，并不是为了扩展父类，那么最好是选组合的方式，因为父类改变会影响子类。对于只是为了复用而继承的类很不利。 什么时候使用继承？ 类之间很明显是一种is-a 关系，而不是has-a或者contain-a关系。 考虑多态时使用继承 另外： 组合优于继承是面向对象设计原则之一 但我觉得也不能像滥用继承一样，一味地使用组合，该用继承的时候还是继承为佳。 以上是个人看法，可能不完全对，如有误，欢迎指教。 参考 https://www.zhihu.com/question/20128211 http://www.cnblogs.com/nuaalfm/archive/2010/04/23/1718453.html]]></content>
      <categories>
        <category>java</category>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java基础（第零篇）对象与类]]></title>
    <url>%2F2017%2F12%2F31%2Fjava-object-and-class%2F</url>
    <content type="text"><![CDATA[前言：本文讲述java中对象与类的一些概念。包括对象与类的有关概念，类间五种关系，类的访问权限等。 在java中，一切都可以用对象来描述，操作对象的标识符只不过是对象的一个引用，一个对象可以有多个引用，就像人可以有多个外号一样，但是这个外号不一定是真实存在这个人，可能以虚假的外号欺骗世人，引用亦如此，引用不一定需要有对象与之关联，一个引用倘若没有引用对象，那么这个引用就是null。而对于一个真实存在的对象，如果没有一个引用引用它，那么很不幸的，它将在不久的将来被jvm的垃圾回收器发现并回收。类是对象的一个模板和蓝图，通过类这个模板可以创建出多个相似的对象。 对象初始化的过程在Java中，对象的创建通过new 关键字动态分配内存创建一个对象，也可以通过反射在运行时创建一个对象。对象在创建时的初始化过程如下： 首先，是执行顶层父类的静态初始化块，然后自顶向下执行所有静态初始化块。然后回到顶层父类执行顶层父类的实例初始化块，然后执行顶层父类的构造方法，接着往下一层同样从实例初始化块开始，依次类推，直到该类自身，先执行该类自身的实例初始化块，然后执行构造方法 类的静态变量赋值顺序：在静态变量声明的地方赋值-&gt;静态初始化块赋值-&gt;构造方法赋值 类的普通成员变量的赋值顺序：在成员变量声明的地方赋值-&gt;在实例初始化块赋值-&gt;在构造方法赋值 看代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748public class Test&#123; public static void main(String[] args)&#123; new Son(); &#125;&#125;class Base&#123; protected int a = 1; protected static int b = 1; &#123; a = 2; b = 2; System.out.println("Base类的实例初始化块执行：a为" + a + "，b为" + b); &#125; static&#123; b = 3; System.out.println("Base类的静态初始化化块执行：b为"+b); &#125; public Base()&#123; b = 4; a = 4; System.out.println("Base类的构造方法执行：a为"+a + "，b为" + b); &#125;&#125;class Son extends Base&#123; &#123; a = 6; b = 6; System.out.println("Son类的实例初始化块执行：a为" + a + "，b为" + b); &#125; static&#123; b = 7; System.out.println("Son类的静态初始化化块执行：b为"+b); &#125; public Son()&#123; a = 8; b = 8; System.out.println("Son类的构造方法执行：a为" + a + "，b为" + b); &#125;&#125; 运行结果：如果运行结果如你所料，那么你基本掌握了这个知识点了，如果不是，那你要好好补补功课了。 类的构成类有方法和属性构成。属性例如商品的价格数量、人的性别年龄等。方法例如价格的税率计算等。 类的属性和方法的访问权限类的属性和方法的访问权限有以下几种： 权限 同一个类 同一个包 同一个包的子类 不同包的子类 不同包中的类 private (私有) √ × × × × default (默认) √ √ √ × × protected (保护) √ √ √ √ × public (公有) √ √ √ √ √ 类重用类重用的方式主要是通过类间的继承关系和聚合组合关系实现的。 关于类的两种重用方式的区别与特点将在下篇文章《java基础(第一篇)继承与组合》总结。 关于类之间的关系类之间的关系主要有五种： 依赖(use-a) 关联(association) 聚合(has-a) 组合(composition) 继承(is-a) 1. 依赖关系是一种use-a的关系。一般而言，一个类A如果操作另一个类B的对象来实现某些功能，我们就称为A依赖于B。 表现为：方法参数传入另一个类的实例对象，静态方法的调用，在代码块和方法中定义的另一个类类型的局部变量等。 这种依赖关系是弱依赖，具有偶然性，并不是长期依赖，是在局部作用域内使用了另一个类的实例或者使用了另一个类的静态方法时。当调用类的方法时，才出现依赖关系 代码实例：1234567891011121314151617181920public class A&#123; //1. 参数形式 public void useOne(B b)&#123; b.showB();//使用b做一些事情 &#125; public void useTwo()&#123; //2. 局部变量形式 new B().showB(); //3. 静态方法形式 B.bb(); &#125;&#125;public class B&#123; public void showB()&#123; System.out.println("b hello world!"); &#125; public static void bb()&#123; System.out.println("B static hello world!"); &#125;&#125; 2. 关联关系是指在一个类中与另一个类有联系。 表现为成员变量的使用 关联关系分两种：单向关联和双向关联。 顾名思义，单向关联是指仅有一方关联了另一方，而双向关联指的是双方互相存在关联。 代码示例： 单向关联 1234567891011public class A&#123; private B b = new B(); public void useB()&#123; //使用b做一些事情 &#125;&#125;public class B&#123; &#125; 双向关联 123456789101112131415public class A&#123; private B b = new B(); public useB()&#123; //使用b做一些事情 &#125;&#125;public class B&#123; private A a = new A(); public void useA()&#123; //使用a做一些事情 &#125;&#125; 另外根据关联的对象的数量又可分为以下几种的关联： 表示方式 说明 1..1 表示一个类的一个对象只与另一个类的一个对象有关联 1..* 表示一个类的一个对象与另一个类的一个或多个对象有关联 0..* 表示一个类的一个对象与另一个类的零个或多个对象有关联 0..1 表示一个类的一个对象与另一个类的零个或一个对象有关联 m..n 表示一个类的一个对象与另一个类的m个到n个对象有关联 两个类之间虽然是存在联系，但是只是在结构上的联系，并没有要求在语义上有联系。两个类在生命周期上是平级关系，其中一个类的消失都不会促使另一个类的消亡，与下面讲述的聚合关系和组合关系有所不同。 3. 聚合关系是一种has-a 的关系，是关联关系的一种特例 表示类A的一个对象拥有另一个类A的实例。 在java中，同样表示为成员变量的形式。但是与普通关联关系有所不同，聚合关系在语义上并不是平级关系，聚合关系的类A 与 类 B 是一种 A has-a B 的关系。而这个b 也可以是多个类共享。 举栗子：电脑与连接在电脑的打印机,电脑拥有一台打印机设备。这台打印机设备属于这台电脑，同时也可以属于其他共享这个打印机的电脑。 4. 组合关系是一种contain-a的关系，也是关联关系的一种特例，区别同样在于语义 表示类A的一个对象包含另一个类B的一个实例对象。 与聚合关系不同在于，聚合关系的a消亡并不会促使b消亡。而组合关系中a的消亡会导致b也跟着消亡，组合关系中a与b也是整体与部分的关系，但部分不能脱离整体而存在。 举个栗子：人和人的头就是组合关系。人一旦死去，头部也会随之消亡。而聚合关系中的例子打印机 可以单独存活于外，电脑死机了，打印机还是连接着其他电脑，但是人的头部恐怕以目前的技术很难接到其他本体吧。 5. 继承关系也称泛化（generalization） 表示一个子类继承了父类。在java中通过关键字extends 实现 这五种类之间的关系的耦合度：继承&gt;组合&gt;聚合&gt;关联&gt;依赖 参考 https://www.jianshu.com/p/ee0c26bcbf3d http://www.cnblogs.com/jiqing9006/p/5915023.html]]></content>
      <categories>
        <category>java</category>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
</search>
